A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.


Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.




Solution 1 : Using StringBuilder

class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder sb = new StringBuilder();

        for(char ch : s.toCharArray()){
            if(Character.isLetterOrDigit(ch)) sb.append(Character.toLowerCase(ch));
        }

        String s1 = sb.toString();
        String s2 = sb.reverse().toString();

        return s1.equals(s2);
    }
}


Solution 2 : Using Two Pointers

class Solution {
    public boolean isPalindrome(String s) {
        int i = 0, j = s.length()-1;
        char ch[] = s.toCharArray();
        while(i<j){
            char c = lower(ch[i]);
            char d = lower(ch[j]);

            if(c==0){
                i++; continue;
            }

            if(d==0){
                j--; continue;
            }

            if(c!=d) return false;

            i++; j--;
            
        }

        return true;
    }

    private char lower(char c){
        if((c>='a' && c<='z') || (c>='0' && c<='9')) return c;

        if(c>='A' && c<='Z') return (char)('a' + c - 'A');

        return 0;
    }
}
